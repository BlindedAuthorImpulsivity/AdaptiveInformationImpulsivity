package environment;
import java.io.Serializable;

import decimalNumber.DecimalNumber;
import decimalNumber.DecimalNumber.IllegalRangeException;
import decimalNumber.DecimalNumber.IllegalScaleException;
import decimalNumber.DecimalNumberArray;
import decimalNumber.DecimalNumberMatrix;
import helper.Helper;
import helper.Helper.MisspecifiedException;

/**
 * <pre>
 * The representation of the environment. An environment is essentially a matrix that specifies the
 * probability distribution over all possible resource values and all possible extrinsic event values.
 * This matrix, which can be obtained by calling .getMatrix(), has the following form:
 * 
 * ======================================================================================
 * "Value"       "p(Resource value = value)"         "p(Extrinsic event value = value)"     
 * --------------------------------------------------------------------------------------
 * -n                    0.xxx                                     0.xxx
 * -n+1                  0.xxx                                     0.xxx              
 * ...                   ...                                      ...              
 * n-1                   0.xxx                                     0.xxx              
 * n                     0.xxx                                     0.xxx              
 * =======================================================================================
 * 
 * In addition to this matrix, each environment has a resource value mean, standard deviation,
 * and distribution type (e.g., a normal distribution), an extrinsic event value mean, standard deviation,
 * and extrinsic event distribution type, and an interruption rate. 
 *  
 * An Environment has to be constructed by providing an EnvironmentBuilderFull and a MarkovDecisionProcess.
 * The first is generated by the View, the second is supplied by the Model. 
 * 
 * Note that an environmentBuilder has to be fully specified: each possible resource value and extrinsic 
 * event value should have their own entry (row) in the matrix, even if the probability of this value is 0. 
 * No impossible resource values should occur either. If either of these restrictions is not met, 
 * a MisspecificationException is thrown.
 *  
 *  All matrices, arrays, DecimalNumbers, and value distribution types are final.
 */
public class Environment implements Serializable
{
	private static final long serialVersionUID = Helper.programmeVersion;

	// Fields relating to resource encounters
	public final  DecimalNumber			resourceValueMean,
										resourceValueSD;
	public final ValueDistributionType	resourceValueDistributionType;
	
	// Fields relating to extrinsic events
	public final DecimalNumber			extrinsicEventMean,
										extrinsicEventSD;
	public final ValueDistributionType	extrinsicEventDistributionType;

	// The immutable matrix containing three columns: "Value", "p(Resource value = value)", and "p(Extrinsic event value = value)"
	private final DecimalNumberMatrix	matrix; // (private so that the user has to use getMatrix(), which provides a useful javadoc)
	
	// Fields relating to interruption rate
	public final DecimalNumber 			interruptionRate;
	
	/** Constructor: turn an environmentBuilderFull into an Environment. An EnvironmentBuilderFull is a 
	 * fully specified environment builder - i.e., it already has exact values for each possible resource
	 * and extrinsic event value. 
	 * 
	 * Note that all DecimalNumber(Matrix)'s are set to immutable from this point forwards 
	 * @throws IllegalScaleException 
	 * @throws IllegalRangeException */
	public Environment(DecimalNumber resourceValueMean, 		DecimalNumber resourceValueSD, 		ValueDistributionType resourceValueDistributionType,
			DecimalNumber extrinsicEventMean, 		DecimalNumber extrinsicEventSD, 		ValueDistributionType extrinsicEventDistributionType,
			DecimalNumber interruptionRate,
			DecimalNumberMatrix matrix) throws MisspecifiedException
	{
		if (resourceValueSD.compareTo(0) < 0 || extrinsicEventSD.compareTo(0) < 0|| interruptionRate.compareTo(0) < 0 || interruptionRate.compareTo(1) > 1)
			throw new IllegalArgumentException("Created an environment with impossible variables. Standard deviations cannot be 0 (here: resourceValueSD = "+ resourceValueSD + ", extrinsicEventSD = " + extrinsicEventSD + "), and the interruption rate should be in the range [0,1] (here: " + interruptionRate + ").");

		
		// Resource value
		this.resourceValueMean = resourceValueMean.clone().setImmutable(true);
		this.resourceValueSD = resourceValueSD.clone().setImmutable(true);
		this.resourceValueDistributionType = resourceValueDistributionType;

		// Extrinsic event value
		this.extrinsicEventMean = extrinsicEventMean.clone().setImmutable(true);
		this.extrinsicEventSD =extrinsicEventSD.clone().setImmutable(true);
		this.extrinsicEventDistributionType = extrinsicEventDistributionType;

		// The matrix containing three columns: "Value", "p(Resource value = value)", and "p(Extrinsic event value = value)"
		this.matrix = matrix.clone();
		this.matrix.sort(0, true);
		this.matrix.setImmutable(true);
		
		// Fields relating to interruption rate
		this.interruptionRate = interruptionRate.clone().setImmutable(true);
	
		// Do some tests to make sure all values 'make sense':
		// The arrays above should sum to 1 and consists of only positive numbers
		DecimalNumberArray resourceValueProbabilityColumn = matrix.getColumn("p(Resource value = value)");
		DecimalNumberArray extrinsicEventProbabilityColumn = matrix.getColumn("p(Extrinsic event value = value)");
		if (!resourceValueProbabilityColumn.sum().equals(1, true)|| !resourceValueProbabilityColumn.sum().equals(1, true) )
			throw new MisspecifiedException("Exception in Environment constructor: when creating an environment from an environment builder: the sum of either the resource value distribution"
					+ " or the sum of the extrinsic event value distribution did not sum to 1. "
					+ "\nResource value distribution: " + resourceValueProbabilityColumn + " (sum: " + resourceValueProbabilityColumn.sum() + ")" 
					+ "\nExtrinsic event value distribution: " + extrinsicEventProbabilityColumn + " (sum: " + extrinsicEventProbabilityColumn.sum() + ")");
		if (resourceValueProbabilityColumn.min().compareTo(0) < 0 || extrinsicEventProbabilityColumn.min().compareTo(0) < 0 )
			throw new MisspecifiedException("Exception in Environment constructor: when creating an environment from an environment builder: the minimum value of either the resource value distribution"
					+ " or the minimum value of the extrinsic event value distribution was lower than 0. "
					+ "\nResource value distribution: " + resourceValueProbabilityColumn + " (sum: " + resourceValueProbabilityColumn.sum() + ")" 
					+ "\nExtrinsic event value distribution: " + extrinsicEventProbabilityColumn + " (sum: " + extrinsicEventProbabilityColumn.sum() + ")");
		
		// Interruption rate should be [0,1]
		if (interruptionRate.compareTo(0) == -1 || interruptionRate.compareTo(1) == 1)
			throw new MisspecifiedException("Exception in Environment constructor: when creating an environment from an environment builder: interruption rate was not in the range [0,1]: interruption rate = " + interruptionRate);
		
		}
	
	/**
	 * Return an <? extends AbstractEnvironmentBuilder> that has the same values as this immutable Environment.
	 * This builder can be changed and used to build a new (immutable) Environment - useful
	 * for when small things have to change (e.g., during retraining). If this Environment
	 * has at least one manually specified distribution, a FullEnvironmentBuilder is returned. In 
	 * this case the ValueDistributionType of all distributions are set to "Manual", and the 
	 * mean and standard deviation of all distributions are recalculated. If no distributions
	 * in this Environment is of type "Manual", a lazy specified distribution is returned.
	 * @return
	 */
	public AbstractEnvironmentBuilder toBuilder() {
		if (resourceValueDistributionType == ValueDistributionType.Manual || extrinsicEventDistributionType == ValueDistributionType.Manual) {
		DecimalNumberMatrix m = matrix.clone();
		m.setImmutable(false);
		return new EnvironmentBuilderFull(
				resourceValueMean.doubleValue(),  resourceValueSD.doubleValue(),  resourceValueDistributionType, 
				extrinsicEventMean.doubleValue(), extrinsicEventSD.doubleValue(), extrinsicEventDistributionType, 
				interruptionRate.doubleValue(),
				m);
		}
		
		return new EnvironmentBuilderLazy(
				resourceValueMean.doubleValue(),  resourceValueSD.doubleValue(),  resourceValueDistributionType, 
				extrinsicEventMean.doubleValue(), extrinsicEventSD.doubleValue(), extrinsicEventDistributionType, 
				interruptionRate.doubleValue());
	}
	
	/**
	 * <pre>
	 * Returns the matrix containing the resource value probabilities and extrinsic event probabilities. This matrix has the following form:
	 * 
	 * ======================================================================================
	 * "Value"       "p(Resource value = value)"         "p(Extrinsic event value = value)"     
	 * --------------------------------------------------------------------------------------
	 * -n                    0.xxx                                     0.xxx
	 * -n+1                  0.xxx                                     0.xxx              
	 * ...                   ...                                      ...              
	 * n-1                   0.xxx                                     0.xxx              
	 * n                     0.xxx                                     0.xxx              
	 * =======================================================================================
	 * 
	 * Where n is the resource value (range = [VALUES_MININMUM, VALUES_MAXIMUM])
	 * Note that all values are included in the table, even if they have a zero probability on both the resource value and extrinsic event value.
	 * 
	 * Note that the matrix, all DecimalNumberArrays (rows) in the matrix, and all DecimalNumbers in the matrix are immutable.
	 * @return
	 */
 	public DecimalNumberMatrix getMatrix()	{
		return this.matrix;
	}
	
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("\n========================= Environment =========================");
		sb.append("\nMean resource value:              " + resourceValueMean);
		sb.append("\nSD resource value:                " + resourceValueSD);
		sb.append("\nDistribution of resource values:  " + resourceValueDistributionType + "\n"); 
		sb.append("\nMean extrinsic event value:       " + extrinsicEventMean);
		sb.append("\nSD extrinsic event value:         " + extrinsicEventSD);
		sb.append("\nDistribution of extrinsic events: " + extrinsicEventDistributionType + "\n");
		sb.append("\nInterruption rate:                " + interruptionRate);
		
		sb.append("\n\nMatrix containing resource value and extrinsic event value probabilities:" + matrix);
		sb.append("===============================================================");
		return sb.toString();
	}
	
	/** Generates a String that can be used in filenames to describe the parameters of the environment */
	public String toFilenameString() {
		StringBuilder sb = new StringBuilder("[");
		sb.append("RVmean=" + 	doubleToWindowsSortableString(resourceValueMean.doubleValue()) + 
				", RVsd=" + 	doubleToWindowsSortableString(resourceValueSD.doubleValue()) + 
				", RVdis=" + 	resourceValueDistributionType + 
				", EEmean=" + 	doubleToWindowsSortableString(extrinsicEventMean.doubleValue()) + 
				", EEsd=" + 	doubleToWindowsSortableString(extrinsicEventSD.doubleValue()) + 
				", EEdis="+		extrinsicEventDistributionType + 
				", II=" + 		doubleToWindowsSortableString(interruptionRate.doubleValue()) +
				"]");
		return sb.toString();
		
	}
	
	/** Windows file sorting ignores all hyphens in names (including minus signs). If we run a large batch of environments, it is nice if we can
	 * sort the filenames based on the values in the string (files names are the names of the environment). Hence, we can replace the "-"
	 * with a "_-"
	 * @param d
	 * @return
	 */
	private String doubleToWindowsSortableString (double d) {
		String s = ""+ d;
		if (d < 0)
			return "_" + s;
		if (d > 0)
			return "+" + s;
		return s;
	}
	
}

